// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Basic models for development - you'll expand these in next session
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole @default(STUDENT)
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations will be added later
  enrollments Enrollment[]
  reviews     Review[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations will be added later
  enrollments Enrollment[]
  reviews     Review[]
  modules     Module[]

  @@map("courses")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  progress  Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Module {
  id       String @id @default(cuid())
  title    String
  order    Int
  courseId String

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id       String     @id @default(cuid())
  title    String
  content  String?
  type     LessonType @default(TEXT)
  order    Int
  moduleId String

  // Relations
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model Review {
  id       String  @id @default(cuid())
  rating   Int
  comment  String?
  userId   String
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

// Enums
enum UserRole {
  ADMIN
  STUDENT
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  ASSIGNMENT
  INTERACTIVE
}
