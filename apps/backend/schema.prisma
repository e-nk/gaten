// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// AUTHENTICATION & USERS
// ================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?  // Add this for credential auth
  role      UserRole @default(STUDENT)
  avatar    String?
  
  // Auth fields
  emailVerified Boolean @default(false)
  lastLoginAt   DateTime?
  
  // Profile fields
  bio           String?
  learningGoals String?
  timezone      String?
  
  // Gamification
  totalPoints   Int @default(0)
  currentStreak Int @default(0)
  longestStreak Int @default(0)
  lastActivityAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts         Account[]        // Add this for NextAuth
  sessions         Session[]
  enrollments      Enrollment[]
  reviews          Review[]
  createdCourses   Course[]        @relation("CourseCreator")
  lessonProgress   LessonProgress[]
  achievements     UserAchievement[]
  notifications    Notification[]
  assignments      AssignmentSubmission[]
	interactiveAttempts InteractiveAttempt[]
  quizAttempts     QuizAttempt[]
  savedCourses     SavedCourse[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// ================================
// COURSE STRUCTURE
// ================================

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  color       String?
  order       Int      @default(0)
  
  courses Course[]
  
  @@map("categories")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  thumbnail   String?
  
  // Course metadata
  level       CourseLevel @default(BEGINNER)
  language    String @default("en")
  duration    Int? // estimated minutes
  price       Float @default(0)
  
  // Course status
  published   Boolean @default(false)
  featured    Boolean @default(false)
  
  // Relations
  creatorId   String
  categoryId  String?
  
  // Analytics
  enrollmentCount Int @default(0)
  averageRating   Float @default(0)
  reviewCount     Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator      User         @relation("CourseCreator", fields: [creatorId], references: [id])
  category     Category?    @relation(fields: [categoryId], references: [id])
  enrollments  Enrollment[]
  reviews      Review[]
  modules      Module[]
  savedBy      SavedCourse[]
  
  @@map("courses")
}

model Module {
  id          String @id @default(cuid())
  title       String
  description String?
  order       Int
  
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("modules")
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String?    // Markdown content
  type        LessonType @default(TEXT)
  order       Int
  
  // Video specific
  videoUrl    String?
  videoDuration Int? // seconds
  
  // Content specific
  estimatedDuration Int? // minutes
  
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  // Relations
  progress    LessonProgress[]
  quizzes     Quiz[]
  assignments Assignment[]
	interactiveContents InteractiveContent[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("lessons")
}

// ================================
// ENROLLMENT & PROGRESS
// ================================

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  
  // Progress tracking
  progress    Float    @default(0.0) // 0-100
  completedAt DateTime?
  
  // Learning stats
  totalTimeSpent Int @default(0) // minutes
  lastAccessedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model LessonProgress {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  
  completed  Boolean  @default(false)
  watchTime  Int      @default(0) // seconds for videos
  completedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model SavedCourse {
  id       String @id @default(cuid())
  userId   String
  courseId String
  
  createdAt DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("saved_courses")
}

// ================================
// INTERACTIVE CONTENT
// ================================

model Quiz {
  id          String @id @default(cuid())
  title       String
  description String?
  
  // Quiz Settings
  timeLimit      Int?     // This should allow null (the ? makes it optional)
  maxAttempts    Int      @default(1)
  passingScore   Float    @default(70.0) // percentage
  shuffleQuestions Boolean @default(false)
  showResults    Boolean @default(true)
  showCorrectAnswers Boolean @default(true)
  availableFrom  DateTime?
  availableUntil DateTime?
  
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  questions QuizQuestion[]
  attempts  QuizAttempt[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("quizzes")
}

model QuizQuestion {
  id          String       @id @default(cuid())
  type        QuestionType
  question    String       // The actual question text
  explanation String?      // Explanation shown after answering
  points      Int          @default(1)
  order       Int
  
  // Question content (JSON structure varies by type)
  content     Json         // Flexible content for different question types
  
  // Correct answer(s) - format varies by question type
  correctAnswer Json       // Can be string, array, object depending on type
  
  quizId String
  quiz   Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("quiz_questions")
}

model QuizAttempt {
  id        String @id @default(cuid())
  userId    String
  quizId    String
  
  // Attempt data
  answers       Json         // User's answers for all questions
  score         Float        // Final score percentage
  pointsEarned  Int          @default(0)
  totalPoints   Int          @default(0)
  passed        Boolean      @default(false)
  timeSpent     Int?         // seconds
  
  // Timing
  startedAt     DateTime     @default(now())
  submittedAt   DateTime?
  completedAt   DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@map("quiz_attempts")
}

model Assignment {
  id          String @id @default(cuid())
  title       String
  description String?
  instructions String? // Rich text instructions
  
  // Assignment settings
  dueDate        DateTime?
  maxPoints      Int      @default(100)
  allowLateSubmission Boolean @default(false)
  maxFileSize    Int      @default(10) // Add this field
  allowedFileTypes String[] @default(["pdf", "doc", "docx"]) // Add this field
  
  // Relationship
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  submissions AssignmentSubmission[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("assignments")
}


model AssignmentSubmission {
  id           String @id @default(cuid())
  userId       String
  assignmentId String
  
	// Submission data
  content      String?
	fileUrl     String? // File submission URL
  fileName    String? // Original file name
  submittedAt DateTime @default(now())
 
  
  // Grading
  grade       Float?   // Points earned
  feedback    String?  // Instructor feedback
  gradedAt    DateTime?
  gradedBy    String?  // Grader user ID

	// Status
  status      SubmissionStatus @default(SUBMITTED)
  isLate      Boolean @default(false)

  updatedAt   DateTime @updatedAt
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, assignmentId])
  @@map("assignment_submissions")
}

model InteractiveContent {
  id          String @id @default(cuid())
  title       String
  description String?
  type        InteractiveType
  
  // Content configuration (JSON structure varies by type)
  config      Json?         // Flexible configuration object
  content     Json         // The actual interactive content data
  
  // Settings
  maxAttempts    Int      @default(1)
  passingScore   Float?   // Optional passing score
  showFeedback   Boolean  @default(true)
  allowReplay    Boolean  @default(true)
  timeLimit      Int?     // Optional time limit in minutes
  
  // Relationship
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  attempts InteractiveAttempt[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("interactive_contents")
}

model InteractiveAttempt {
  id          String @id @default(cuid())
  userId      String
  contentId   String
  
  // Attempt data
  responses   Json         // User's responses/interactions
  score       Float?       // Score if applicable
  completed   Boolean      @default(false)
  timeSpent   Int?         // Time spent in seconds
  
  // Timing
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  content InteractiveContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@map("interactive_attempts")
}

// ================================
// REVIEWS & RATINGS
// ================================

model Review {
  id       String @id @default(cuid())
  rating   Int // 1-5
  comment  String?
  
  userId   String
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

// ================================
// GAMIFICATION
// ================================

model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  points      Int @default(0)
  
  // Achievement criteria
  type        AchievementType
  criteria    Json // Flexible criteria object
  
  users UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String @id @default(cuid())
  userId        String
  achievementId String
  
  earnedAt DateTime @default(now())
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// ================================
// NOTIFICATIONS
// ================================

model Notification {
  id      String @id @default(cuid())
  userId  String
  
  type    NotificationType
  title   String
  message String
  data    Json? // Additional data
  
  read    Boolean @default(false)
  readAt  DateTime?
  
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  ADMIN
  STUDENT
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  ASSIGNMENT
  INTERACTIVE
}

enum QuestionType {
  MULTIPLE_CHOICE      // Single correct answer
  MULTIPLE_SELECT      // Multiple correct answers
  TRUE_FALSE
  FILL_BLANK          // Fill in the blank
  SHORT_ANSWER        // Text input
  ESSAY               // Long text
  MATCHING            // Match pairs
  ORDERING            // Arrange in order
  IMAGE_HOTSPOT       // Click on image areas
}

enum AchievementType {
  COURSE_COMPLETION
  STREAK
  POINTS
  ASSIGNMENT
  QUIZ_SCORE
  FIRST_LOGIN
}

enum NotificationType {
  ACHIEVEMENT
  COURSE_UPDATE
  ASSIGNMENT_DUE
  STREAK_REMINDER
  COURSE_RECOMMENDATION
  SYSTEM
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
}

enum InteractiveType {
  DRAG_DROP        // Drag and drop matching
  HOTSPOT          // Clickable image hotspots  
  SEQUENCE         // Order/sequence activities
  MATCHING         // Match items between columns
  TIMELINE         // Interactive timeline
  SIMULATION       // Custom simulations
  WIDGET           // Custom interactive widgets
  H5P              // H5P content integration
}